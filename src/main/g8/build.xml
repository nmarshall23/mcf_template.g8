<project name="$name$" default="main">
<!-- Great ant build file from BuildCraft -->
	<property environment="env"/>
	<!-- Project Properties -->
	<loadproperties srcFile="project.properties"/>


	<!-- Ant build script Properties -->

	<property name="build.dir" value="build"/>
	<property name="classes.dir" value="\${build.dir}/classes"/>
	<property name="download.dir" value="download"/>
	<property name="src.dir" value="src/main"/>
	<property name="resources.dir" value="src/resources"/>

	<property name="forge.name" value="minecraftforge-src-\${minecraft.version}-\${forge.version}.zip"/>

	<property name="jar.dir" value="bin"/>
	<property name="forge.dir" value="\${build.dir}/forge"/>
	<property name="mcp.dir" value="\${forge.dir}/mcp"/>
	<property name="mcpsrc.dir" value="\${mcp.dir}/src"/>
	
	<available property="forge-exists" file="\${download.dir}/\${forge.name}"/>

	<condition property="out-of-date">
		<not>
			<and>
				<isset property="forge-exists"/>
				<available file="\${mcpsrc.dir}"/>
			</and>
		</not>
	</condition>

	<condition property="jar.file.name" value="\${jar.dir}/\${project.name}-\${minecraft.version}-\${project.version}.jar" else="\${jar.dir}/\${project.name}-\${minecraft.version}-\${project.version}.jar">
			<isset property="forge-long-name"/>
	</condition>

	<condition property="os.minecraft.data.path" value="\${env.HOME}" else="\${env.APPDATA}">
		<os family="unix" />
	</condition>
	

	<property name="mod.install.path" value="\${os.minecraft.data.path}/\${minecraft.data.dir}" />


	<condition property="isset.scala.home" value="\${scala.home}" else="\${env.SCALA_HOME}" >
	   <resourceexists>
		  <file file="\${scala.home}" />
	   </resourceexists>
        </condition>

	<condition property="isset.scala.path" value="\${scala.home}/bin:\${env.PATH}" else="\${env.PATH}" >
	   <resourceexists>
		  <file file="\${scala.home}" />
	   </resourceexists>
	</condition>

<!-- Plugins   -->



<!-- Targets -->

	<target name="SetupEclipseProject">
	<taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" 
	     classpath="\${build.dir}/antlibs/ant-eclipse-1.0-jvm1.2.jar" />
		<eclipse>
			 <buildSpec>
                	<buildCommand>
                        	<name>org.scala-ide.sdt.core.scalabuilder</name>
                        	<arguments>
                        	</arguments>
                	</buildCommand>
        		</buildSpec>
        		<natures>
                		<nature>org.scala-ide.sdt.core.scalanature</nature>
                		<nature>org.eclipse.jdt.core.javanature</nature>
        		</natures>
      			<project />
	      		<classpath>
	        		<source path="src/main" />
	        		<output path="\${classes.dir}" />
      			</classpath>
		</eclipse>

	</target>

	<!-- copies modjar to minecraft savegame dir -->
	<target name="installmod" depends="package">
		<copy file="\${jar.file.name}" todir="\${mod.install.path}/mods"/>
	</target>


	<mkdir dir="\${download.dir}"/>


	<!-- Clear build directory -->
	<target name="clean">
		<delete dir="\${build.dir}"/>
	</target>


	<!-- Download necessary files -->
	<target name="download-files" depends="download-forge"/>

	<!-- Download forge (if it doesn't exist) -->
	<target name="download-forge" unless="forge-exists">
		<get src="http://files.minecraftforge.net/\${forge.name}" dest="\${download.dir}" usetimestamp="True"/>
	</target>

	<!-- Setup mcp and forge -->
	<target name="setup" depends="download-files" if="out-of-date">

		<unzip dest="\${forge.dir}/.." src="\${download.dir}/\${forge.name}"/>

		<!-- Fix executable permissions -->
		<chmod dir="\${forge.dir}" perm="ugo+rx" includes="**.sh"/>

		<!-- Install forge -->
		<exec dir="\${forge.dir}" executable="cmd" osfamily="windows">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg line="/c install.cmd"/>
		</exec>

		<exec dir="\${forge.dir}" executable="sh" osfamily="unix">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg value="install.sh"/>
		</exec>

	</target>

	<target name="clean-src">
		<delete verbose="true">
			<fileset dir="\${mcpsrc.dir}/minecraft">
				<present present="both" targetdir="\${src.dir}" /> 
			</fileset>
		</delete>
	</target>
	<target name="copy-src" depends="clean-src">
		<!-- Copy sources -->
		<copy todir="\${mcpsrc.dir}/minecraft" verbose="true">
			<fileset dir="\${src.dir}" includes="**/*"/>

		</copy>
	</target>

	<target name="compile" depends="setup,copy-src">

		<mkdir dir="\${classes.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="\${classes.dir}" includes="**/*"/>
		</delete>

		<!-- Recompile -->
		<exec dir="\${mcp.dir}" executable="cmd" osfamily="windows">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg line="/c recompile.bat"/>
		</exec>

		<exec dir="\${mcp.dir}" executable="sh" osfamily="unix">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg value="recompile.sh"/>
		</exec>

		<!-- Check for failure -->
		<fail message="MCP failed to build">
			<condition>
				<resourcecontains resource="\${mcp.dir}/logs/client_compile.log" substring="error:"/>
			</condition>
		</fail>

	</target>

	<target name="reobf" depends="compile">

		<!-- Reobfuscate -->
		<exec dir="\${mcp.dir}" executable="cmd" osfamily="windows">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg line="/c reobfuscate_srg.bat"/>
		</exec>

		<exec dir="\${mcp.dir}" executable="sh" osfamily="unix">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg value="reobfuscate_srg.sh"/>
		</exec>

		<!-- Copy classes -->
		<copy todir="\${classes.dir}">
			<fileset dir="\${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy resources -->
		<copy todir="\${classes.dir}">
			<fileset dir="\${resources.dir}">
				<exclude name="build.xml"/>
			</fileset>
		</copy>

		<!-- Copy localizations -->
		<!--
		     XXX FIXME
		<copy todir="\${classes.dir}" failonerror="false">
			<fileset dir="\${lang.dir}">
				<exclude name="README.md"/>
			</fileset>
		</copy>
		-->
		<!-- Reset src dir to post-forge-install state -->

	</target>

	<!-- Package the compiled files -->
	<target name="package" depends="reobf">

		<mkdir dir="\${jar.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="\${jar.dir}" includes="**/*"/>
		</delete>
	
		<jar destfile="\${jar.file.name}" basedir="\${classes.dir}"/>

	</target>

	<target name="run">

		<!-- Start Client -->
		<exec dir="\${mcp.dir}" executable="cmd" osfamily="windows">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg line="/c startclient.bat"/>
		</exec>

		<exec dir="\${mcp.dir}" executable="sh" osfamily="unix">
			<env key="SCALA_HOME" value="\${isset.scala.home}"/>
			<env key="PATH" value="\${isset.scala.path}"/>
			<arg value="startclient.sh"/>
		</exec>

	</target>

	<target name="test-run" depends="compile,run"/>

	<!-- Default target to run -->
	<target name="main" depends="package"/>

</project>
